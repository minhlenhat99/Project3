// <auto-generated />
using System;
using CompanyPropertyManagement.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyPropertyManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b79fd81-4b3d-4ae1-b426-ae0d0ac8f0d2"),
                            ConcurrencyStamp = "49d91a48-ffdb-404c-8380-72a27606cc02",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = new Guid("2ffdcb9b-c25d-4dfb-96db-c257f4cbdd28"),
                            ConcurrencyStamp = "bf22dfa0-fb11-4927-8461-2c1c5313fb12",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bc6912e-3848-4882-861c-8ba7f54fdcd0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59ab5f4a-c3da-4f16-a3e1-4ec10b6c0e86",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Employee1"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.BU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BUs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e604eb-6eca-4458-b731-5504f522f803"),
                            Name = "Unit 1"
                        },
                        new
                        {
                            Id = new Guid("098675b5-5f60-4ac0-bcf8-581d48e79ff7"),
                            Name = "Unit 2"
                        },
                        new
                        {
                            Id = new Guid("aa1df8d7-7c94-4168-9bfe-54dd3356f656"),
                            Name = "Unit 3"
                        },
                        new
                        {
                            Id = new Guid("7cc88bcf-5db7-462c-bfcf-3e941d2eff96"),
                            Name = "Unit 4"
                        },
                        new
                        {
                            Id = new Guid("d3ef7298-0059-42f5-90fa-12f4549ed0db"),
                            Name = "Unit 5"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba9ec1e0-676d-4a37-9ff2-fee3641cfff0"),
                            Name = "Screen"
                        },
                        new
                        {
                            Id = new Guid("b263ae2c-f981-406e-a1c9-2661e1653979"),
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = new Guid("59253a87-9db9-42ed-8aef-5b06aaa7c52b"),
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = new Guid("e240e347-6044-4643-8061-2ec2f124165b"),
                            Name = "Chair"
                        },
                        new
                        {
                            Id = new Guid("3eabb0c3-beec-493e-9a9d-6aeaca1969df"),
                            Name = "Table"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuId");

                    b.HasIndex("UserId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatCodeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SeatCodeId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08983801-6db7-40ad-ac98-070945a8ef3c"),
                            CategoryId = new Guid("ba9ec1e0-676d-4a37-9ff2-fee3641cfff0"),
                            SeatCodeId = "11.05.058"
                        },
                        new
                        {
                            Id = new Guid("e25e5986-efbe-4620-b036-91266982540b"),
                            CategoryId = new Guid("ba9ec1e0-676d-4a37-9ff2-fee3641cfff0"),
                            SeatCodeId = "11.05.059"
                        },
                        new
                        {
                            Id = new Guid("b310b6af-e3fd-4b31-bd75-544dde0ba9fc"),
                            CategoryId = new Guid("ba9ec1e0-676d-4a37-9ff2-fee3641cfff0"),
                            SeatCodeId = "11.05.060"
                        },
                        new
                        {
                            Id = new Guid("5ded5c64-c347-4920-82e7-4ed6167206e9"),
                            CategoryId = new Guid("ba9ec1e0-676d-4a37-9ff2-fee3641cfff0"),
                            SeatCodeId = "11.05.061"
                        },
                        new
                        {
                            Id = new Guid("7fe38c3a-ce80-4a74-9a58-e8ea1c776af8"),
                            CategoryId = new Guid("ba9ec1e0-676d-4a37-9ff2-fee3641cfff0"),
                            SeatCodeId = "11.05.062"
                        },
                        new
                        {
                            Id = new Guid("15898832-d82e-4868-a289-be6183739b73"),
                            CategoryId = new Guid("b263ae2c-f981-406e-a1c9-2661e1653979"),
                            SeatCodeId = "11.05.058"
                        },
                        new
                        {
                            Id = new Guid("93095204-ed3d-4c46-94a5-20de97967407"),
                            CategoryId = new Guid("b263ae2c-f981-406e-a1c9-2661e1653979"),
                            SeatCodeId = "11.05.059"
                        },
                        new
                        {
                            Id = new Guid("81242aa5-e9ec-472e-9eae-20681d7b804a"),
                            CategoryId = new Guid("b263ae2c-f981-406e-a1c9-2661e1653979"),
                            SeatCodeId = "11.05.060"
                        },
                        new
                        {
                            Id = new Guid("a222bf17-af85-4d51-b7df-2852f5ed2874"),
                            CategoryId = new Guid("b263ae2c-f981-406e-a1c9-2661e1653979"),
                            SeatCodeId = "11.05.061"
                        },
                        new
                        {
                            Id = new Guid("7f77d7a6-88d0-41af-9a8c-8b784b562417"),
                            CategoryId = new Guid("b263ae2c-f981-406e-a1c9-2661e1653979"),
                            SeatCodeId = "11.05.062"
                        },
                        new
                        {
                            Id = new Guid("45442fc4-1ae7-433f-acde-1d554c6a8c08"),
                            CategoryId = new Guid("59253a87-9db9-42ed-8aef-5b06aaa7c52b"),
                            SeatCodeId = "11.05.058"
                        },
                        new
                        {
                            Id = new Guid("c4f89e0c-6a70-498c-83cf-4b5ac85847b3"),
                            CategoryId = new Guid("59253a87-9db9-42ed-8aef-5b06aaa7c52b"),
                            SeatCodeId = "11.05.059"
                        },
                        new
                        {
                            Id = new Guid("375c3d45-5b72-4a44-a22a-8986ebf667cf"),
                            CategoryId = new Guid("59253a87-9db9-42ed-8aef-5b06aaa7c52b"),
                            SeatCodeId = "11.05.060"
                        },
                        new
                        {
                            Id = new Guid("0f48d9a8-d140-43df-8311-c0e4cad567d5"),
                            CategoryId = new Guid("59253a87-9db9-42ed-8aef-5b06aaa7c52b"),
                            SeatCodeId = "11.05.061"
                        },
                        new
                        {
                            Id = new Guid("5539bd07-3c6c-46df-b72d-d20a6ebd8f7a"),
                            CategoryId = new Guid("59253a87-9db9-42ed-8aef-5b06aaa7c52b"),
                            SeatCodeId = "11.05.062"
                        },
                        new
                        {
                            Id = new Guid("150b4807-35b7-45b4-a154-6482a5987c41"),
                            CategoryId = new Guid("e240e347-6044-4643-8061-2ec2f124165b"),
                            SeatCodeId = "11.05.058"
                        },
                        new
                        {
                            Id = new Guid("cccd7ece-8015-43b4-b221-a0054f8147fe"),
                            CategoryId = new Guid("e240e347-6044-4643-8061-2ec2f124165b"),
                            SeatCodeId = "11.05.059"
                        },
                        new
                        {
                            Id = new Guid("6306768f-31d1-4dbd-a259-79acd342f12a"),
                            CategoryId = new Guid("e240e347-6044-4643-8061-2ec2f124165b"),
                            SeatCodeId = "11.05.060"
                        },
                        new
                        {
                            Id = new Guid("3ac45609-f51e-4deb-b284-278d3a0cd122"),
                            CategoryId = new Guid("e240e347-6044-4643-8061-2ec2f124165b"),
                            SeatCodeId = "11.05.061"
                        },
                        new
                        {
                            Id = new Guid("758bbd80-8f06-4bb7-81fc-86af90edf925"),
                            CategoryId = new Guid("e240e347-6044-4643-8061-2ec2f124165b"),
                            SeatCodeId = "11.05.062"
                        },
                        new
                        {
                            Id = new Guid("a26564ba-6b2a-420e-bee2-860ca211d812"),
                            CategoryId = new Guid("3eabb0c3-beec-493e-9a9d-6aeaca1969df"),
                            SeatCodeId = "11.05.058"
                        },
                        new
                        {
                            Id = new Guid("5b763a4d-a34e-4728-9d18-4a3597722e00"),
                            CategoryId = new Guid("3eabb0c3-beec-493e-9a9d-6aeaca1969df"),
                            SeatCodeId = "11.05.059"
                        },
                        new
                        {
                            Id = new Guid("b876724c-563c-4fbd-bfe8-aff8aedd92d3"),
                            CategoryId = new Guid("3eabb0c3-beec-493e-9a9d-6aeaca1969df"),
                            SeatCodeId = "11.05.060"
                        },
                        new
                        {
                            Id = new Guid("c65add1d-9405-498a-81af-4a43a7a3ad3b"),
                            CategoryId = new Guid("3eabb0c3-beec-493e-9a9d-6aeaca1969df"),
                            SeatCodeId = "11.05.061"
                        },
                        new
                        {
                            Id = new Guid("f9cbfb03-603a-4440-8b6c-7b3d5092d330"),
                            CategoryId = new Guid("3eabb0c3-beec-493e-9a9d-6aeaca1969df"),
                            SeatCodeId = "11.05.062"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.SeatCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("BuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuId");

                    b.ToTable("SeatCodes");

                    b.HasData(
                        new
                        {
                            Id = "11.05.058",
                            BuId = new Guid("d1e604eb-6eca-4458-b731-5504f522f803")
                        },
                        new
                        {
                            Id = "11.05.059",
                            BuId = new Guid("d1e604eb-6eca-4458-b731-5504f522f803")
                        },
                        new
                        {
                            Id = "11.05.060",
                            BuId = new Guid("d1e604eb-6eca-4458-b731-5504f522f803")
                        },
                        new
                        {
                            Id = "11.05.061",
                            BuId = new Guid("d1e604eb-6eca-4458-b731-5504f522f803")
                        },
                        new
                        {
                            Id = "11.05.062",
                            BuId = new Guid("d1e604eb-6eca-4458-b731-5504f522f803")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Inventory", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.BU", "BU")
                        .WithMany("Inventories")
                        .HasForeignKey("BuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BU");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Property", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPropertyManagement.Data.Domain.SeatCode", "SeatCode")
                        .WithMany("Properties")
                        .HasForeignKey("SeatCodeId");

                    b.Navigation("Category");

                    b.Navigation("SeatCode");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.SeatCode", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.BU", "BU")
                        .WithMany("SeatCodes")
                        .HasForeignKey("BuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BU");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.AppUser", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.BU", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("SeatCodes");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Category", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.SeatCode", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
